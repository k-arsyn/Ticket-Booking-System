/*
 * This source file was generated by the Gradle 'init' task
 */
package ticket.booking;

import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
import java.util.Map;
import java.util.Scanner;
import java.util.UUID;

import ticket.booking.entites.Train;
import ticket.booking.entites.User;
import ticket.booking.services.UserBookingService;
import ticket.booking.util.UserServiceUtil;

// import ticket.booking.entites.Train;
// import ticket.booking.entites.User;
// import ticket.booking.services.UserBookingService;
// import ticket.booking.util.UserServiceUtil;

public class App {
    //UserBookingService userBookingService ;
    public static void main(String[] args)  {
        System.out.println("Initialising System ...");
        int option = 0;
        Scanner sc = new Scanner(System.in);
        //UserBookingService userBookingService = new UserBookingService();
        UserBookingService userBookingService;
        try {
            userBookingService = new UserBookingService();
        } catch (IOException e) {
            System.out.println("Something went wrong: " + e.getMessage());
            e.printStackTrace();
            return;
        }
        while (option != 7) {
            System.out.println("Choose option");
            System.out.println("1. Sign up");
            System.out.println("2. Login");
            System.out.println("3. Fetch Bookings");
            System.out.println("4. Search Trains");
            System.out.println("5. Book a Seat");
            System.out.println("6. Cancel my Booking");
            System.out.println("7. Exit the App");
            option = sc.nextInt();
            Train trainSelectedForBooking = new Train();
            switch (option) {
                case 1:
                System.out.println("Enter the username to signup");
                String nameToSignUp = sc.next();
                System.out.println("Enter the password to signup");
                String passwordToSignUp = sc.next();
                User user1 = new User(nameToSignUp,passwordToSignUp, UserServiceUtil.hashedPassword(passwordToSignUp),
                                      new ArrayList<>() , UUID.randomUUID().toString());
                userBookingService.signUp(user1);



                    break;


                case 2:
                System.out.println("Enter the username to Login");
                String nameToLogin = sc.next();
                System.out.println("Enter the password to Login");
                String passwordToLogin = sc.next();
                User userToLogin = new User(nameToLogin, passwordToLogin, UserServiceUtil.hashedPassword(passwordToLogin), new ArrayList<>(), UUID.randomUUID().toString());
                try{
                    userBookingService = new UserBookingService(userToLogin);
                }catch (IOException ex){
                    return;
                }
                    break;


                case 3:
                System.out.println("Fetching your bookings");
                userBookingService.fetchTickets();
                    break;


                case 4:
                System.out.println("Type your source station");
                String source = sc.next();
                System.out.println("Type your destination station");
                String dest = sc.next();
                List<Train> trainToBeBooked = userBookingService.geTrain(source, dest);
                int index = 1;
                for(Train t : trainToBeBooked) {
                    System.out.println(index+" Train id : "+t.getTrainId());
                    for (Map.Entry<String, String> en : t.getStationTimes().entrySet()) {
                        Object key = en.getKey();
                        Object val = en.getValue();
                        System.out.println("station "+key+" time: "+val );
                    }
                    index++;
                }
                System.out.println("Select a train by typing 1,2,3...");
                int selection = sc.nextInt() - 1; // Subtract 1 to convert to 0-based index
                if(selection >= 0 && selection < trainToBeBooked.size()) {
                    trainSelectedForBooking = trainToBeBooked.get(selection);
                } else {
                    System.out.println("Invalid selection");
                }
                break;
                case 5:
                System.out.println("Select a seat out of these seats");
                List<List<Integer>> seats = userBookingService.fetchSeats(trainSelectedForBooking);
                for (List<Integer> row: seats){
                    for (Integer val: row){
                        System.out.print(val+" ");
                    }
                    System.out.println();
                }
                System.out.println("Select the seat by typing the row and column");
                System.out.println("Enter the row");
                int row = sc.nextInt();
                System.out.println("Enter the column");
                int col = sc.nextInt();
                System.out.println("Booking your seat....");
                Boolean booked = userBookingService.bookTrainSeats(trainSelectedForBooking, row, col);
                if(booked.equals(Boolean.TRUE)){
                    System.out.println("Booked! Enjoy your journey");
                }else{
                    System.out.println("Can't book this seat");
                } 
                    break;
                
                case 6:
                    boolean flag = userBookingService.cancelTickets();
                    if(flag){
                        System.out.println("Cancellation Confimed");
                    }
                    else {
                        System.out.println("Failed ...");
                    }
                    break;
                default:
                    break;
            }
        }
    }

    public Object getGreeting() {
        throw new UnsupportedOperationException("Not supported yet.");
    }
}
